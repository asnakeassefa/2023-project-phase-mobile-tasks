// Mocks generated by Mockito 5.4.2 from annotations
// in todo_app_with_clean_arch/test/features/todo/domain/usecases/creat_task_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app_with_clean_arch/core/error/failure.dart' as _i5;
import 'package:todo_app_with_clean_arch/features/todo/domain/entities/task_entity.dart'
    as _i6;
import 'package:todo_app_with_clean_arch/features/todo/domain/repositories/task_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>> createTask(
          _i6.TaskEntity? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.TaskEntity>(
          this,
          Invocation.method(
            #createTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>> viewAllTask() =>
      (super.noSuchMethod(
        Invocation.method(
          #viewAllTask,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.TaskEntity>>(
          this,
          Invocation.method(
            #viewAllTask,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>> viewSpecificTask(
          String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewSpecificTask,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.TaskEntity>(
          this,
          Invocation.method(
            #viewSpecificTask,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>> updateTask(
          String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.TaskEntity>(
          this,
          Invocation.method(
            #updateTask,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteTask(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteTask,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
